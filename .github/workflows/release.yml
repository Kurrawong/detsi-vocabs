# This workflow publishes a DETSI Prez container image with the vocab data baked in.
# It is triggered when a GitHub release is published.
# It builds the container image, runs a vulnerability scan, runs a smoke test,
# and pushes the container image to GHCR.

name: Release

on:
  release:
    types:
      - published

concurrency:
  group: deploy-production
  cancel-in-progress: false

permissions:
  id-token: write
  packages: write
  contents: read

env:
  CONTAINER_REGISTRY: ghcr.io
  CONTAINER_IMAGE_NAME: detsi-prez
  CONTAINER_IMAGE_PLATFORMS: linux/amd64
  AZURE_RESOURCE_GROUP: ${{ vars.AZURE_RESOURCE_GROUP }}
  AZURE_CONTAINER_APP_NAME: ${{ vars.AZURE_CONTAINER_APP_NAME }}
  AZURE_STATIC_WEB_APP_NAME: ${{ vars.AZURE_STATIC_WEB_APP_NAME }}
  PREZ_UI_TAG: v4.1.2

jobs:
  push-to-ghcr:
    environment: production
    runs-on: ubuntu-latest
    outputs:
      image-name: ${{ steps.image.outputs.name }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: latest

      - name: Docker metadata
        id: metadata
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/kurrawong/${{ env.CONTAINER_IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=${{ github.event.release.tag_name }}
            type=semver,pattern={{major}}.{{minor}},value=${{ github.event.release.tag_name }}
            type=semver,pattern={{major}},value=${{ github.event.release.tag_name }}

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build container image
        uses: docker/build-push-action@v6
        with:
          outputs: type=cacheonly
          context: .
          push: false
          load: true
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          platforms: ${{ env.CONTAINER_IMAGE_PLATFORMS }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract primary image tag
        id: image
        run: echo "name=$(echo '${{ steps.metadata.outputs.tags }}' | head -n 1)" >> $GITHUB_OUTPUT

      - name: Run Trivy vulnerability scan
        uses: aquasecurity/trivy-action@0.32.0
        with:
          image-ref: ${{ steps.image.outputs.name }}
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"

      - name: Container image smoke test
        run: |
          set -e
          IMAGE_NAME=$(echo "${{ steps.metadata.outputs.tags }}" | head -n 1)
          TEST_SUCCESS=false

          cleanup() {
            echo "Cleaning up..."
            if [ "$(docker ps -q -f name=smoke-test-container)" ]; then
              docker logs smoke-test-container
              docker stop smoke-test-container
            fi
          }

                    echo "Starting container for smoke test using image: $IMAGE_NAME"

          # Use different approaches for act vs GitHub Actions
          if [ "$ACT" = "true" ]; then
            echo "Running with act - using fixed port mapping"
            docker run --platform=linux/amd64 -d --rm --name smoke-test-container -e SPARQL_REPO_TYPE=pyoxigraph -e ENABLE_SPARQL_ENDPOINT=true -e LOCAL_RDF_DIR=/app/rdf -p 8000:8000 "$IMAGE_NAME"
            BASE_URL="http://localhost:8000"
          else
            echo "Running in GitHub Actions - using dynamic port mapping"
            docker run --platform=linux/amd64 -d --rm --name smoke-test-container -e SPARQL_REPO_TYPE=pyoxigraph -e ENABLE_SPARQL_ENDPOINT=true -e LOCAL_RDF_DIR=/app/rdf -p 8000 "$IMAGE_NAME"
            
            HOST_PORT_MAPPING=$(docker port smoke-test-container 8000 | head -n 1)
            if [ -z "$HOST_PORT_MAPPING" ]; then
              echo "Failed to get port mapping for smoke-test-container"
              cleanup
              exit 1
            fi
            HOST_PORT=${HOST_PORT_MAPPING##*:}
            BASE_URL="http://localhost:$HOST_PORT"
          fi

          echo "Container is listening on $BASE_URL"

          echo "Waiting for container to become healthy..."
          for i in {1..12}; do
            if curl -s -f "$BASE_URL/health" > /dev/null; then
              echo "Container is healthy. Checking for data..."
              count=$(curl -s -X POST "$BASE_URL/sparql" \
                -H "Content-Type: application/x-www-form-urlencoded" \
                -H "Accept: application/sparql-results+json" \
                --data-urlencode "query=SELECT (count(*) as ?count) WHERE { ?s a <http://www.w3.org/2004/02/skos/core#Concept> }" \
                | jq -r '.results.bindings[0].count.value')

              if [ "$count" -gt 0 ]; then
                echo "Data check passed! Found $count SKOS concepts."
                TEST_SUCCESS=true
                break
              else
                echo "Data check failed, no SKOS concepts found. Retrying..."
              fi
            fi
            echo "Attempt $i: Health check or data check failed. Retrying in 5 seconds..."
            sleep 5
          done

          cleanup

          if [ "$TEST_SUCCESS" = "false" ]; then
            echo "Smoke test failed after all attempts."
            exit 1
          fi

      - name: Log in to GitHub Container Registry
        if: ${{ !env.ACT }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push container image to GHCR
        if: ${{ !env.ACT }}
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          platforms: ${{ env.CONTAINER_IMAGE_PLATFORMS }}
          cache-from: type=gha

  deploy-to-azure-container-apps:
    environment: production
    runs-on: ubuntu-latest
    needs: push-to-ghcr
    steps:
      - name: Azure login
        uses: azure/login@v2
        if: ${{ !env.ACT }}
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy to Container Apps
        uses: azure/container-apps-deploy-action@v1
        if: ${{ !env.ACT }}
        with:
          resourceGroup: ${{ env.AZURE_RESOURCE_GROUP }}
          containerAppName: ${{ env.AZURE_CONTAINER_APP_NAME }}
          imageToDeploy: ${{ needs.push-to-ghcr.outputs.image-name }}

  deploy-to-azure-static-web-app:
    environment: production
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.18.0"
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: "9.0.5"
          run_install: false

      - name: Clone Prez UI repository
        run: |
          git clone --single-branch --branch ${{ env.PREZ_UI_TAG }} https://github.com/rdflib/prez-ui.git prez-ui

      - name: Install dependencies
        run: |
          cd prez-ui
          pnpm install

      - name: Build Prez packages
        run: |
          cd prez-ui/packages/prez-lib
          pnpm build
          cd ../prez-components
          pnpm build

      - name: Build Prez UI
        run: |
          cd prez-ui/packages/prez-ui
          NODE_OPTIONS="--max-old-space-size=4096" \
          NUXT_PUBLIC_PREZ_API_ENDPOINT=${{ vars.NUXT_PUBLIC_PREZ_API_ENDPOINT }} \
          pnpm -- nuxt generate
        env:
          NODE_ENV: production

      - name: Copy static web app config into build output
        run: |
          cp staticwebapp.config.json prez-ui/packages/prez-ui/.output/public/staticwebapp.config.json

      - name: Azure login
        uses: azure/login@v2
        if: ${{ !env.ACT }}
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get deployment token
        id: get_token
        if: ${{ !env.ACT }}
        run: |
          # Get the deployment token dynamically
          DEPLOYMENT_TOKEN=$(az staticwebapp secrets list --name "${{ env.AZURE_STATIC_WEB_APP_NAME }}" --resource-group "${{ env.AZURE_RESOURCE_GROUP }}" --query "properties.apiKey" -o tsv)

          # Mask the token in logs for security
          echo "::add-mask::$DEPLOYMENT_TOKEN"

          # Set as a job output (masked)
          echo "token=$DEPLOYMENT_TOKEN" >> $GITHUB_OUTPUT

      - name: Deploy to Static Web App
        uses: Azure/static-web-apps-deploy@v1
        if: ${{ !env.ACT }}
        with:
          azure_static_web_apps_api_token: ${{ steps.get_token.outputs.token }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          skip_app_build: true
          app_location: "prez-ui/packages/prez-ui/.output/public"
          output_location: ""
